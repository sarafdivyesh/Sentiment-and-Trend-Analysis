// Start Hive and Add following jars to process json data
ADD JAR /usr/hdp/2.5.0.0-1245/hive/lib/json-serde-1.3.8-jar-with-dependencies.jar
ADD JAR /usr/hdp/2.5.0.0-1245/hive/lib/json-udf-1.3.8-jar-with-dependencies.jar


// Create hive table to store dictionary data 
CREATE EXTERNAL TABLE IF NOT EXISTS dictionary (
subject STRING,
id int,
word STRING,
grammer STRING,
polarity_n STRING,
polarity STRING
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
STORED AS TEXTFILE;

// Load dictionary data from HDFS to hive table
load data inpath '/user/dictionary/' into TABLE dictionary;


//Create table to Store Twitter data in JSON Data.
CREATE EXTERNAL TABLE raw_tweet(id BIGINT,created_at STRING,source STRING,favorited BOOLEAN, retweeted_status STRUCT<text:STRING, `user` :STRUCT<screen_name:STRING,name:STRING>,retweet_count:INT>,text STRING,entities STRUCT<hashtags:ARRAY<STRUCT<text:STRING>>>,`user` STRUCT<screen_name:STRING,friends_count:INT,followers_count:INT,statuses_count:INT,verified:BOOLEAN,utc_offset:INT,time_zone:STRING>,in_reply_to_screen_name STRING) 
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe' tblproperties('ignore.malformed.json'='true') 


// Load twitter data from HDFS Path to the above created Table.
load data inpath '/user/tweet/*' into TABLE raw_tweet;

//Split text into words.
create view split_text as select id,raw_tweet.text, words from raw_tweet lateral view explode(sentences(lower(text))) dummy as words;

//separate words into single word row.
create view divide_word as select id,split_text.text, word from split_text lateral view explode( words ) dummy as word ;

//Calculate Polarity of tweet by joining divide_word view with dictionary.
create view calculate_polarity as select
    id,divide_word.text,
    divide_word.word,
    case d.polarity
      when  'negative' then -1
      when 'positive' then 1
      else 0 end as polarity
 from divide_word left outer join dictionary d on divide_word.word = d.word;


//Sum single word polarity value for all users based on UsedId and assign sentiment.
create table tweets_sentiment stored as orc as select
  id,
    case
    when sum(polarity) > 0 then 'positive'
    when sum(polarity) < 0 then 'negative'
    else 'neutral' end as sentiment,text
 from calculate_polarity group by id, text;